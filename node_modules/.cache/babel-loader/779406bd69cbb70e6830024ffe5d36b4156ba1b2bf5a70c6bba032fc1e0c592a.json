{"ast":null,"code":"export { Suggestion, HighlightSpan } from './types';\nexport const processTextWithSuggestions = (text, suggestions) => {\n  if (!suggestions.length) {\n    return [{\n      text,\n      isHighlighted: false\n    }];\n  }\n\n  // Sort suggestions by start position\n  const sortedSuggestions = [...suggestions].sort((a, b) => a.start - b.start);\n  const spans = [];\n  let currentIndex = 0;\n  sortedSuggestions.forEach(suggestion => {\n    // Add text before the suggestion\n    if (currentIndex < suggestion.start) {\n      spans.push({\n        text: text.slice(currentIndex, suggestion.start),\n        isHighlighted: false\n      });\n    }\n\n    // Add the highlighted suggestion\n    spans.push({\n      text: text.slice(suggestion.start, suggestion.end),\n      suggestion,\n      isHighlighted: true\n    });\n    currentIndex = suggestion.end;\n  });\n\n  // Add remaining text after the last suggestion\n  if (currentIndex < text.length) {\n    spans.push({\n      text: text.slice(currentIndex),\n      isHighlighted: false\n    });\n  }\n  return spans;\n};\nexport const getLevelClassName = level => {\n  switch (level) {\n    case 1:\n      return 'highlight-level-1';\n    case 2:\n      return 'highlight-level-2';\n    case 3:\n      return 'highlight-level-3';\n    default:\n      return '';\n  }\n};\nexport const getLevelColor = level => {\n  switch (level) {\n    case 1:\n      return 'text-blue-600';\n    case 2:\n      return 'text-yellow-600';\n    case 3:\n      return 'text-red-600';\n    default:\n      return '';\n  }\n};\nexport const getLevelLabel = level => {\n  switch (level) {\n    case 1:\n      return 'Grammar';\n    case 2:\n      return 'Structure';\n    case 3:\n      return 'Content';\n    default:\n      return '';\n  }\n};","map":{"version":3,"names":["Suggestion","HighlightSpan","processTextWithSuggestions","text","suggestions","length","isHighlighted","sortedSuggestions","sort","a","b","start","spans","currentIndex","forEach","suggestion","push","slice","end","getLevelClassName","level","getLevelColor","getLevelLabel"],"sources":["/Users/thiagodonato/Documents/App_Projects/Edit_Text/src/utils.ts"],"sourcesContent":["import { Suggestion, HighlightSpan } from './types';\n\nexport { Suggestion, HighlightSpan } from './types';\n\nexport const processTextWithSuggestions = (text: string, suggestions: Suggestion[]): HighlightSpan[] => {\n  if (!suggestions.length) {\n    return [{ text, isHighlighted: false }];\n  }\n\n  // Sort suggestions by start position\n  const sortedSuggestions = [...suggestions].sort((a, b) => a.start - b.start);\n  const spans: HighlightSpan[] = [];\n  let currentIndex = 0;\n\n  sortedSuggestions.forEach((suggestion) => {\n    // Add text before the suggestion\n    if (currentIndex < suggestion.start) {\n      spans.push({\n        text: text.slice(currentIndex, suggestion.start),\n        isHighlighted: false,\n      });\n    }\n\n    // Add the highlighted suggestion\n    spans.push({\n      text: text.slice(suggestion.start, suggestion.end),\n      suggestion,\n      isHighlighted: true,\n    });\n\n    currentIndex = suggestion.end;\n  });\n\n  // Add remaining text after the last suggestion\n  if (currentIndex < text.length) {\n    spans.push({\n      text: text.slice(currentIndex),\n      isHighlighted: false,\n    });\n  }\n\n  return spans;\n};\n\nexport const getLevelClassName = (level: 1 | 2 | 3): string => {\n  switch (level) {\n    case 1:\n      return 'highlight-level-1';\n    case 2:\n      return 'highlight-level-2';\n    case 3:\n      return 'highlight-level-3';\n    default:\n      return '';\n  }\n};\n\nexport const getLevelColor = (level: 1 | 2 | 3): string => {\n  switch (level) {\n    case 1:\n      return 'text-blue-600';\n    case 2:\n      return 'text-yellow-600';\n    case 3:\n      return 'text-red-600';\n    default:\n      return '';\n  }\n};\n\nexport const getLevelLabel = (level: 1 | 2 | 3): string => {\n  switch (level) {\n    case 1:\n      return 'Grammar';\n    case 2:\n      return 'Structure';\n    case 3:\n      return 'Content';\n    default:\n      return '';\n  }\n}; "],"mappings":"AAEA,SAASA,UAAU,EAAEC,aAAa,QAAQ,SAAS;AAEnD,OAAO,MAAMC,0BAA0B,GAAGA,CAACC,IAAY,EAAEC,WAAyB,KAAsB;EACtG,IAAI,CAACA,WAAW,CAACC,MAAM,EAAE;IACvB,OAAO,CAAC;MAAEF,IAAI;MAAEG,aAAa,EAAE;IAAM,CAAC,CAAC;EACzC;;EAEA;EACA,MAAMC,iBAAiB,GAAG,CAAC,GAAGH,WAAW,CAAC,CAACI,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,KAAK,GAAGD,CAAC,CAACC,KAAK,CAAC;EAC5E,MAAMC,KAAsB,GAAG,EAAE;EACjC,IAAIC,YAAY,GAAG,CAAC;EAEpBN,iBAAiB,CAACO,OAAO,CAAEC,UAAU,IAAK;IACxC;IACA,IAAIF,YAAY,GAAGE,UAAU,CAACJ,KAAK,EAAE;MACnCC,KAAK,CAACI,IAAI,CAAC;QACTb,IAAI,EAAEA,IAAI,CAACc,KAAK,CAACJ,YAAY,EAAEE,UAAU,CAACJ,KAAK,CAAC;QAChDL,aAAa,EAAE;MACjB,CAAC,CAAC;IACJ;;IAEA;IACAM,KAAK,CAACI,IAAI,CAAC;MACTb,IAAI,EAAEA,IAAI,CAACc,KAAK,CAACF,UAAU,CAACJ,KAAK,EAAEI,UAAU,CAACG,GAAG,CAAC;MAClDH,UAAU;MACVT,aAAa,EAAE;IACjB,CAAC,CAAC;IAEFO,YAAY,GAAGE,UAAU,CAACG,GAAG;EAC/B,CAAC,CAAC;;EAEF;EACA,IAAIL,YAAY,GAAGV,IAAI,CAACE,MAAM,EAAE;IAC9BO,KAAK,CAACI,IAAI,CAAC;MACTb,IAAI,EAAEA,IAAI,CAACc,KAAK,CAACJ,YAAY,CAAC;MAC9BP,aAAa,EAAE;IACjB,CAAC,CAAC;EACJ;EAEA,OAAOM,KAAK;AACd,CAAC;AAED,OAAO,MAAMO,iBAAiB,GAAIC,KAAgB,IAAa;EAC7D,QAAQA,KAAK;IACX,KAAK,CAAC;MACJ,OAAO,mBAAmB;IAC5B,KAAK,CAAC;MACJ,OAAO,mBAAmB;IAC5B,KAAK,CAAC;MACJ,OAAO,mBAAmB;IAC5B;MACE,OAAO,EAAE;EACb;AACF,CAAC;AAED,OAAO,MAAMC,aAAa,GAAID,KAAgB,IAAa;EACzD,QAAQA,KAAK;IACX,KAAK,CAAC;MACJ,OAAO,eAAe;IACxB,KAAK,CAAC;MACJ,OAAO,iBAAiB;IAC1B,KAAK,CAAC;MACJ,OAAO,cAAc;IACvB;MACE,OAAO,EAAE;EACb;AACF,CAAC;AAED,OAAO,MAAME,aAAa,GAAIF,KAAgB,IAAa;EACzD,QAAQA,KAAK;IACX,KAAK,CAAC;MACJ,OAAO,SAAS;IAClB,KAAK,CAAC;MACJ,OAAO,WAAW;IACpB,KAAK,CAAC;MACJ,OAAO,SAAS;IAClB;MACE,OAAO,EAAE;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}