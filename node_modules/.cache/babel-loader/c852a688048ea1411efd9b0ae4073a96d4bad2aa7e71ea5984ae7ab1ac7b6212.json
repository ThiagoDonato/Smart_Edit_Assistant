{"ast":null,"code":"const OPENAI_API_URL='https://api.openai.com/v1/chat/completions';const SYSTEM_PROMPT=\"You are an editing assistant. Review the text and return a JSON array of suggested improvements. Categorize each as level 1 (grammar), level 2 (cohesion/structure), or level 3 (content addition/removal). For each, return:\\n- 'level' (1, 2, or 3),\\n- 'start' and 'end' character indices in the original string,\\n- 'original' text,\\n- 'replacement' (optional),\\n- 'reason' (brief explanation). Only return the JSON object.\";export const analyzeText=async(text,apiKey)=>{if(!apiKey){throw new Error('OpenAI API key is required');}try{var _data$choices$,_data$choices$$messag;const response=await fetch(OPENAI_API_URL,{method:'POST',headers:{'Content-Type':'application/json','Authorization':\"Bearer \".concat(apiKey)},body:JSON.stringify({model:'gpt-4o',messages:[{role:'system',content:SYSTEM_PROMPT},{role:'user',content:text}],temperature:0.3,max_tokens:2000})});if(!response.ok){var _errorData$error;const errorData=await response.json();throw new Error(\"OpenAI API error: \".concat(((_errorData$error=errorData.error)===null||_errorData$error===void 0?void 0:_errorData$error.message)||'Unknown error'));}const data=await response.json();const content=(_data$choices$=data.choices[0])===null||_data$choices$===void 0?void 0:(_data$choices$$messag=_data$choices$.message)===null||_data$choices$$messag===void 0?void 0:_data$choices$$messag.content;if(!content){throw new Error('No response content from OpenAI');}// Parse the JSON response\ntry{const parsed=JSON.parse(content);return parsed;}catch(parseError){console.error('Failed to parse OpenAI response:',content);throw new Error('Invalid JSON response from OpenAI');}}catch(error){console.error('Error calling OpenAI API:',error);throw error;}};","map":{"version":3,"names":["OPENAI_API_URL","SYSTEM_PROMPT","analyzeText","text","apiKey","Error","_data$choices$","_data$choices$$messag","response","fetch","method","headers","concat","body","JSON","stringify","model","messages","role","content","temperature","max_tokens","ok","_errorData$error","errorData","json","error","message","data","choices","parsed","parse","parseError","console"],"sources":["/Users/thiagodonato/Documents/App_Projects/Edit_Text/src/api.ts"],"sourcesContent":["import { OpenAIResponse } from './types';\n\nconst OPENAI_API_URL = 'https://api.openai.com/v1/chat/completions';\n\nconst SYSTEM_PROMPT = `You are an editing assistant. Review the text and return a JSON array of suggested improvements. Categorize each as level 1 (grammar), level 2 (cohesion/structure), or level 3 (content addition/removal). For each, return:\n- 'level' (1, 2, or 3),\n- 'start' and 'end' character indices in the original string,\n- 'original' text,\n- 'replacement' (optional),\n- 'reason' (brief explanation). Only return the JSON object.`;\n\nexport const analyzeText = async (text: string, apiKey: string): Promise<OpenAIResponse> => {\n  if (!apiKey) {\n    throw new Error('OpenAI API key is required');\n  }\n\n  try {\n    const response = await fetch(OPENAI_API_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${apiKey}`,\n      },\n      body: JSON.stringify({\n        model: 'gpt-4o',\n        messages: [\n          {\n            role: 'system',\n            content: SYSTEM_PROMPT,\n          },\n          {\n            role: 'user',\n            content: text,\n          },\n        ],\n        temperature: 0.3,\n        max_tokens: 2000,\n      }),\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(`OpenAI API error: ${errorData.error?.message || 'Unknown error'}`);\n    }\n\n    const data = await response.json();\n    const content = data.choices[0]?.message?.content;\n\n    if (!content) {\n      throw new Error('No response content from OpenAI');\n    }\n\n    // Parse the JSON response\n    try {\n      const parsed = JSON.parse(content);\n      return parsed;\n    } catch (parseError) {\n      console.error('Failed to parse OpenAI response:', content);\n      throw new Error('Invalid JSON response from OpenAI');\n    }\n  } catch (error) {\n    console.error('Error calling OpenAI API:', error);\n    throw error;\n  }\n}; "],"mappings":"AAEA,KAAM,CAAAA,cAAc,CAAG,4CAA4C,CAEnE,KAAM,CAAAC,aAAa,uaAK0C,CAE7D,MAAO,MAAM,CAAAC,WAAW,CAAG,KAAAA,CAAOC,IAAY,CAAEC,MAAc,GAA8B,CAC1F,GAAI,CAACA,MAAM,CAAE,CACX,KAAM,IAAI,CAAAC,KAAK,CAAC,4BAA4B,CAAC,CAC/C,CAEA,GAAI,KAAAC,cAAA,CAAAC,qBAAA,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACT,cAAc,CAAE,CAC3CU,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAAkB,CAClC,eAAe,WAAAC,MAAA,CAAYR,MAAM,CACnC,CAAC,CACDS,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CACnBC,KAAK,CAAE,QAAQ,CACfC,QAAQ,CAAE,CACR,CACEC,IAAI,CAAE,QAAQ,CACdC,OAAO,CAAElB,aACX,CAAC,CACD,CACEiB,IAAI,CAAE,MAAM,CACZC,OAAO,CAAEhB,IACX,CAAC,CACF,CACDiB,WAAW,CAAE,GAAG,CAChBC,UAAU,CAAE,IACd,CAAC,CACH,CAAC,CAAC,CAEF,GAAI,CAACb,QAAQ,CAACc,EAAE,CAAE,KAAAC,gBAAA,CAChB,KAAM,CAAAC,SAAS,CAAG,KAAM,CAAAhB,QAAQ,CAACiB,IAAI,CAAC,CAAC,CACvC,KAAM,IAAI,CAAApB,KAAK,sBAAAO,MAAA,CAAsB,EAAAW,gBAAA,CAAAC,SAAS,CAACE,KAAK,UAAAH,gBAAA,iBAAfA,gBAAA,CAAiBI,OAAO,GAAI,eAAe,CAAE,CAAC,CACrF,CAEA,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAApB,QAAQ,CAACiB,IAAI,CAAC,CAAC,CAClC,KAAM,CAAAN,OAAO,EAAAb,cAAA,CAAGsB,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,UAAAvB,cAAA,kBAAAC,qBAAA,CAAfD,cAAA,CAAiBqB,OAAO,UAAApB,qBAAA,iBAAxBA,qBAAA,CAA0BY,OAAO,CAEjD,GAAI,CAACA,OAAO,CAAE,CACZ,KAAM,IAAI,CAAAd,KAAK,CAAC,iCAAiC,CAAC,CACpD,CAEA;AACA,GAAI,CACF,KAAM,CAAAyB,MAAM,CAAGhB,IAAI,CAACiB,KAAK,CAACZ,OAAO,CAAC,CAClC,MAAO,CAAAW,MAAM,CACf,CAAE,MAAOE,UAAU,CAAE,CACnBC,OAAO,CAACP,KAAK,CAAC,kCAAkC,CAAEP,OAAO,CAAC,CAC1D,KAAM,IAAI,CAAAd,KAAK,CAAC,mCAAmC,CAAC,CACtD,CACF,CAAE,MAAOqB,KAAK,CAAE,CACdO,OAAO,CAACP,KAAK,CAAC,2BAA2B,CAAEA,KAAK,CAAC,CACjD,KAAM,CAAAA,KAAK,CACb,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}