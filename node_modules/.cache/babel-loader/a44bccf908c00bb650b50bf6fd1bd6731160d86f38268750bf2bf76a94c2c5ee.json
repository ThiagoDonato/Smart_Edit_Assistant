{"ast":null,"code":"const OPENAI_API_URL = 'https://api.openai.com/v1/chat/completions';\nconst SYSTEM_PROMPT = `You are an editing assistant. Review the text and return a JSON array of suggested improvements. Categorize each as level 1 (grammar), level 2 (cohesion/structure), or level 3 (content addition/removal). For each, return:\n- 'level' (1, 2, or 3),\n- 'start' and 'end' character indices in the original string,\n- 'original' text,\n- 'replacement' (optional),\n- 'reason' (brief explanation). Only return the JSON object.`;\nexport const analyzeText = async (text, apiKey) => {\n  if (!apiKey) {\n    throw new Error('OpenAI API key is required');\n  }\n  try {\n    var _data$choices$, _data$choices$$messag;\n    const response = await fetch(OPENAI_API_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${apiKey}`\n      },\n      body: JSON.stringify({\n        model: 'gpt-4o',\n        messages: [{\n          role: 'system',\n          content: SYSTEM_PROMPT\n        }, {\n          role: 'user',\n          content: text\n        }],\n        temperature: 0.3,\n        max_tokens: 2000\n      })\n    });\n    if (!response.ok) {\n      var _errorData$error;\n      const errorData = await response.json();\n      throw new Error(`OpenAI API error: ${((_errorData$error = errorData.error) === null || _errorData$error === void 0 ? void 0 : _errorData$error.message) || 'Unknown error'}`);\n    }\n    const data = await response.json();\n    const content = (_data$choices$ = data.choices[0]) === null || _data$choices$ === void 0 ? void 0 : (_data$choices$$messag = _data$choices$.message) === null || _data$choices$$messag === void 0 ? void 0 : _data$choices$$messag.content;\n    if (!content) {\n      throw new Error('No response content from OpenAI');\n    }\n\n    // Parse the JSON response\n    try {\n      const parsed = JSON.parse(content);\n      return parsed;\n    } catch (parseError) {\n      console.error('Failed to parse OpenAI response:', content);\n      throw new Error('Invalid JSON response from OpenAI');\n    }\n  } catch (error) {\n    console.error('Error calling OpenAI API:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["OPENAI_API_URL","SYSTEM_PROMPT","analyzeText","text","apiKey","Error","_data$choices$","_data$choices$$messag","response","fetch","method","headers","body","JSON","stringify","model","messages","role","content","temperature","max_tokens","ok","_errorData$error","errorData","json","error","message","data","choices","parsed","parse","parseError","console"],"sources":["/Users/thiagodonato/Documents/App_Projects/Edit_Text/src/api.ts"],"sourcesContent":["import { OpenAIResponse } from './types';\n\nconst OPENAI_API_URL = 'https://api.openai.com/v1/chat/completions';\n\nconst SYSTEM_PROMPT = `You are an editing assistant. Review the text and return a JSON array of suggested improvements. Categorize each as level 1 (grammar), level 2 (cohesion/structure), or level 3 (content addition/removal). For each, return:\n- 'level' (1, 2, or 3),\n- 'start' and 'end' character indices in the original string,\n- 'original' text,\n- 'replacement' (optional),\n- 'reason' (brief explanation). Only return the JSON object.`;\n\nexport const analyzeText = async (text: string, apiKey: string): Promise<OpenAIResponse> => {\n  if (!apiKey) {\n    throw new Error('OpenAI API key is required');\n  }\n\n  try {\n    const response = await fetch(OPENAI_API_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${apiKey}`,\n      },\n      body: JSON.stringify({\n        model: 'gpt-4o',\n        messages: [\n          {\n            role: 'system',\n            content: SYSTEM_PROMPT,\n          },\n          {\n            role: 'user',\n            content: text,\n          },\n        ],\n        temperature: 0.3,\n        max_tokens: 2000,\n      }),\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(`OpenAI API error: ${errorData.error?.message || 'Unknown error'}`);\n    }\n\n    const data = await response.json();\n    const content = data.choices[0]?.message?.content;\n\n    if (!content) {\n      throw new Error('No response content from OpenAI');\n    }\n\n    // Parse the JSON response\n    try {\n      const parsed = JSON.parse(content);\n      return parsed;\n    } catch (parseError) {\n      console.error('Failed to parse OpenAI response:', content);\n      throw new Error('Invalid JSON response from OpenAI');\n    }\n  } catch (error) {\n    console.error('Error calling OpenAI API:', error);\n    throw error;\n  }\n}; "],"mappings":"AAEA,MAAMA,cAAc,GAAG,4CAA4C;AAEnE,MAAMC,aAAa,GAAG;AACtB;AACA;AACA;AACA;AACA,6DAA6D;AAE7D,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAOC,IAAY,EAAEC,MAAc,KAA8B;EAC1F,IAAI,CAACA,MAAM,EAAE;IACX,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;EAC/C;EAEA,IAAI;IAAA,IAAAC,cAAA,EAAAC,qBAAA;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACT,cAAc,EAAE;MAC3CU,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE,UAAUP,MAAM;MACnC,CAAC;MACDQ,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,KAAK,EAAE,QAAQ;QACfC,QAAQ,EAAE,CACR;UACEC,IAAI,EAAE,QAAQ;UACdC,OAAO,EAAEjB;QACX,CAAC,EACD;UACEgB,IAAI,EAAE,MAAM;UACZC,OAAO,EAAEf;QACX,CAAC,CACF;QACDgB,WAAW,EAAE,GAAG;QAChBC,UAAU,EAAE;MACd,CAAC;IACH,CAAC,CAAC;IAEF,IAAI,CAACZ,QAAQ,CAACa,EAAE,EAAE;MAAA,IAAAC,gBAAA;MAChB,MAAMC,SAAS,GAAG,MAAMf,QAAQ,CAACgB,IAAI,CAAC,CAAC;MACvC,MAAM,IAAInB,KAAK,CAAC,qBAAqB,EAAAiB,gBAAA,GAAAC,SAAS,CAACE,KAAK,cAAAH,gBAAA,uBAAfA,gBAAA,CAAiBI,OAAO,KAAI,eAAe,EAAE,CAAC;IACrF;IAEA,MAAMC,IAAI,GAAG,MAAMnB,QAAQ,CAACgB,IAAI,CAAC,CAAC;IAClC,MAAMN,OAAO,IAAAZ,cAAA,GAAGqB,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,cAAAtB,cAAA,wBAAAC,qBAAA,GAAfD,cAAA,CAAiBoB,OAAO,cAAAnB,qBAAA,uBAAxBA,qBAAA,CAA0BW,OAAO;IAEjD,IAAI,CAACA,OAAO,EAAE;MACZ,MAAM,IAAIb,KAAK,CAAC,iCAAiC,CAAC;IACpD;;IAEA;IACA,IAAI;MACF,MAAMwB,MAAM,GAAGhB,IAAI,CAACiB,KAAK,CAACZ,OAAO,CAAC;MAClC,OAAOW,MAAM;IACf,CAAC,CAAC,OAAOE,UAAU,EAAE;MACnBC,OAAO,CAACP,KAAK,CAAC,kCAAkC,EAAEP,OAAO,CAAC;MAC1D,MAAM,IAAIb,KAAK,CAAC,mCAAmC,CAAC;IACtD;EACF,CAAC,CAAC,OAAOoB,KAAK,EAAE;IACdO,OAAO,CAACP,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}