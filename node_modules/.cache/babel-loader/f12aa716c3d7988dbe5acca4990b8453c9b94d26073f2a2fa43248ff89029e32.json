{"ast":null,"code":"var _jsxFileName = \"/Users/thiagodonato/Documents/App_Projects/Edit_Text/src/components/SuggestionOverlay.tsx\";\nimport React from 'react';\nimport { getLevelClassName } from '../utils';\nimport Tooltip from './Tooltip';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SuggestionOverlay = ({\n  spans\n}) => {\n  if (spans.length === 0) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-full p-4 border border-gray-300 rounded-lg bg-white font-mono text-sm leading-relaxed whitespace-pre-wrap\",\n    children: spans.map((span, index) => {\n      if (span.isHighlighted && span.suggestion) {\n        return /*#__PURE__*/_jsxDEV(Tooltip, {\n          suggestion: span.suggestion,\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: getLevelClassName(span.suggestion.level),\n            children: span.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 13\n        }, this);\n      }\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        children: span.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 16\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n};\n_c = SuggestionOverlay;\nexport default SuggestionOverlay;\nvar _c;\n$RefreshReg$(_c, \"SuggestionOverlay\");","map":{"version":3,"names":["React","getLevelClassName","Tooltip","jsxDEV","_jsxDEV","SuggestionOverlay","spans","length","className","children","map","span","index","isHighlighted","suggestion","level","text","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/thiagodonato/Documents/App_Projects/Edit_Text/src/components/SuggestionOverlay.tsx"],"sourcesContent":["import React from 'react';\nimport { HighlightSpan } from '../types';\nimport { getLevelClassName } from '../utils';\nimport Tooltip from './Tooltip';\n\ninterface SuggestionOverlayProps {\n  spans: HighlightSpan[];\n}\n\nconst SuggestionOverlay: React.FC<SuggestionOverlayProps> = ({ spans }) => {\n  if (spans.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className=\"w-full p-4 border border-gray-300 rounded-lg bg-white font-mono text-sm leading-relaxed whitespace-pre-wrap\">\n      {spans.map((span, index) => {\n        if (span.isHighlighted && span.suggestion) {\n          return (\n            <Tooltip key={index} suggestion={span.suggestion}>\n              <span className={getLevelClassName(span.suggestion.level)}>\n                {span.text}\n              </span>\n            </Tooltip>\n          );\n        }\n        return <span key={index}>{span.text}</span>;\n      })}\n    </div>\n  );\n};\n\nexport default SuggestionOverlay; "],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,iBAAiB,QAAQ,UAAU;AAC5C,OAAOC,OAAO,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAMhC,MAAMC,iBAAmD,GAAGA,CAAC;EAAEC;AAAM,CAAC,KAAK;EACzE,IAAIA,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;IACtB,OAAO,IAAI;EACb;EAEA,oBACEH,OAAA;IAAKI,SAAS,EAAC,6GAA6G;IAAAC,QAAA,EACzHH,KAAK,CAACI,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;MAC1B,IAAID,IAAI,CAACE,aAAa,IAAIF,IAAI,CAACG,UAAU,EAAE;QACzC,oBACEV,OAAA,CAACF,OAAO;UAAaY,UAAU,EAAEH,IAAI,CAACG,UAAW;UAAAL,QAAA,eAC/CL,OAAA;YAAMI,SAAS,EAAEP,iBAAiB,CAACU,IAAI,CAACG,UAAU,CAACC,KAAK,CAAE;YAAAN,QAAA,EACvDE,IAAI,CAACK;UAAI;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACN;QAAC,GAHKR,KAAK;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAIV,CAAC;MAEd;MACA,oBAAOhB,OAAA;QAAAK,QAAA,EAAmBE,IAAI,CAACK;MAAI,GAAjBJ,KAAK;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAmB,CAAC;IAC7C,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACC,EAAA,GArBIhB,iBAAmD;AAuBzD,eAAeA,iBAAiB;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}